<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-31 at 07:36:46.
 *
 * テストは以下の環境変数に値をセットした状態で実行する
 * GLIMIT_TEST_MYSQL_HOST
 * GLIMIT_TEST_MYSQL_USER
 * GLIMIT_TEST_MYSQL_PASS
 * GLIMIT_TEST_MYSQL_DB
 * GLIMIT_TEST_MYSQL_TABLE
 */
ini_set('display_errors', 1);
require_once('PHPUnit/Autoload.php');

class glimitTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var mysql
	 *
	 * ここに接続設定を記述すれば環境変数よりも優先される
	 */
	static $mysql;
	static $config = array(
		'host' => null, 
		'user' => null, 
		'pass' => null, 
		'db' => null, 
		'table' => null, 
	);
	static $table = null;

	static $testData = array(
		array('aaa', 'bbb', 1, 101), 
		array('aaa', 'bbb', 110, 1), 
		array('aaa', 'ccc', 1, 101), 
		array('aaa', 'ccc', 1, 101), 
		array('aaa', 'ccc', 1, 101), 
		array('あいうえお', null, 2, 104), 
		array('かきくけこ', null, 1, 102), 
		array('あいうえお', null, 2, 104), 
		array('aaa', 'ccc', 1, 101), 
		array('aaa', 'ccc', 1, 101), 
		array('あいう', 'えおアイウエオ', 1, 101), 
		array('aaa', 'ccc', 2, 101), 
		array('aaa', 'ccc', 2, 101), 
		array('aaa', 'ccc', 2, 101), 
		array('あいうえお', null, 1, null), 
		array('aaa', 'ccc', 2, 101), 
		array('aaa', 'ccc', 2, 101), 
		array('aaa', 'ccc', 2, 102), 
		array('aaa', 'ccc', 2, 102), 
		array(null, '999', 2, 102), 
		array(null, '999', 2, 102), 
		array(null, '999', 2, 102), 
		array(null, '999', 3, 102), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '999', 1, 102), 
		array(null, '999', 3, 102), 
		array(null, '999', 3, 102), 
		array(null, '999', 3, 102), 
		array('あいうえお', null, 2, 102), 
		array('あいうえお', null, 2, 104), 
		array('かきくけこ', null, 1, 102), 
		array('あいうえお', null, 2, 104), 
		array('あいうえお', null, 1, 104), 
		array('あいう', 'えおアイウエオ', 3, 101), 
		array('あいうえお', null, 2, 103), 
		array('あいうえお', null, 1, null), 
		array('あいうえお', null, 2, 103), 
		array('あいうえお', null, 1, 103), 
		array('かきくけこ', null, 2, 104), 
		array('あいうえお', null, 1, 103), 
		array('あいうえお', null, 2, 103), 
		array('かきくけこ', null, null, 101), 
		array('かきくけこ', null, null, 102), 
		array('あいうえお', null, null, 101), 
		array('かきくけこ', null, null, 104), 
		array('かきくけこ', null, null, 103), 
		array('あいうえお', null, null, 101), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('', 'アイウエオ', 1, 101), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('', 'アイウエオ', 1, 101), 
		array('あいうえお', 'アイウエオ', 3, 103), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', 'アイウエオ', 3, 101), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '999', 1, 102), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', 'アイウエオ', 1, 101), 
		array('あいうえお', '999', 1, 102), 
		array('あいうえお', '999', 2, 102), 
		array('あいうえお', '', 2, 104), 
		array('あいうえお', '', 1, 102), 
		array('あいうえお', '', 2, 102), 
		array('あいうえお', '', 3, 104), 
		array('あいうえお', '', 1, 101), 
	);

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public static function setUpBeforeClass() {
		self::$mysql = mysql_connect(
			(self::$config['host']) ? self::$config['host'] : getenv('GLIMIT_TEST_MYSQL_HOST'), 
			(self::$config['user']) ? self::$config['user'] : getenv('GLIMIT_TEST_MYSQL_USER'), 
			(self::$config['pass']) ? self::$config['pass'] :  getenv('GLIMIT_TEST_MYSQL_PASS') 
		);

		mysql_select_db((self::$config['db']) ? self::$config['db'] : getenv('GLIMIT_TEST_MYSQL_DB'), self::$mysql);
		mysql_set_charset('utf8');

		self::$table = self::$config['table'];
		self::$table or self::$table = getenv('GLIMIT_TEST_MYSQL_TABLE');

		mysql_query('DROP TABLE IF EXISTS `'. self::$table. '`;');

		if (!mysql_query('CREATE TABLE `'. self::$table. '` (id INT AUTO_INCREMENT, s1 VARCHAR(64), s2 VARCHAR(64), n1 INT, n2 INT, INDEX(id)) ENGINE=INNODB;')) {
			die(mysql_error());
		}

		// テストデータINSERT
		mysql_query('SET AUTOCOMMIT = 0;');
		mysql_query('START TRANSACTION;');
		$tmpl = 'INSERT INTO `'. self::$table. "` (s1, s2, n1, n2) VALUES (%s, %s, %s, %s);";
		foreach (self::$testData as $data) {
			$s1 = (is_null($data[0])) ? 'null' : "'". mysql_real_escape_string($data[0]). "'";
			$s2 = (is_null($data[1])) ? 'null' : "'". mysql_real_escape_string($data[1]). "'";
			$n1 = (is_null($data[2])) ? 'null' : $data[2];
			$n2 = (is_null($data[3])) ? 'null' : $data[3];
			if (!mysql_query(sprintf($tmpl, $s1, $s2, $n1, $n2))) {
				die(mysql_error());
			}
		}
		mysql_query('COMMIT;');
	}

	/**
	 * 全テスト終了時に接続を切断する
	 */
	public static function tearDownAfterClass() {
		// MySQLに保存したテストデータを消去
		//mysql_query('DROP TABLE `'. self::$table. '`;');

		mysql_close(self::$mysql);
	}

	/**
	 * $testDataから$expectedを作成
	 */
	public function makeExpected($limit, $keys) {
		$group = array();
		$expected = array();
		for ($i = 0; $i < count(self::$testData); $i++) {
			$tmp = array(
				'id' => (string) ($i + 1), 
				's1' => self::$testData[$i][0], 
				's2' => self::$testData[$i][1], 
				'n1' => (is_null(self::$testData[$i][2])) ? null : (string) self::$testData[$i][2],
				'n2' => (is_null(self::$testData[$i][3])) ? null : (string) self::$testData[$i][3],
			);

			$key = '';
			foreach ($keys as $k) {
				if (is_null($tmp[$k])) {
					$key = null;
					break;
				}
				$key .= chr(1). (string) $tmp[$k];
			}

			if (!is_null($key)) {
				$group[$key] = (isset($group[$key])) ? $group[$key] + 1 : 0;
				if ($group[$key] < $limit) {
					array_push($expected, $tmp);
				}
			}
		}

		return $expected;
	}

	/**
	 * s1(5)
	 */
	public function test5s1() {
		$limit = 5;
		$keys = array('s1');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * s2(1)
	 */
	public function test1s2() {
		$limit = 1;
		$keys = array('s2');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * n1(20)
	 */
	public function test20n1() {
		$limit = 20;
		$keys = array('n1');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * n2(7)
	 */
	public function test7n2() {
		$limit = 7;
		$keys = array('n2');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * s1s2(4)
	 */
	public function test4s1s2() {
		$limit = 4;
		$keys = array('s1', 's2');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * s1n1(8)
	 */
	public function test8s1n1() {
		$limit = 8;
		$keys = array('s1', 'n1');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * n1s1s2(2)
	 */
	public function test2n1s1s2() {
		$limit = 2;
		$keys = array('n1', 's1', 's2');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}

	/**
	 * n2s1n1s2(9)
	 */
	public function test9n2s1n1s2() {
		$limit = 9;
		$keys = array('n2', 's1', 'n1', 's2');

		$result = mysql_query('SELECT * FROM `'. self::$table. "` WHERE glimit($limit, ". join(',', $keys). ") = 1;");
		if (!$result) die(mysql_error());

		$expected = $this->makeExpected($limit, $keys);

		$idx = 0;
		while ($row = mysql_fetch_assoc($result)) {
			$this->assertSame($expected[$idx++], $row); 
		}
	}
}
